{"version":3,"sources":["connection.js","landingPage.js","App.js","serviceWorker.js","index.js"],"names":["require","config","firebaseConfig","apiKey","process","REACT_APP_FIREBASE_KEY","authDomain","REACT_APP_FIREBASE_DOMAIN","databaseURL","projectId","REACT_APP_FIREBASE_PROJEDT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_SENDER_ID","appId","measurementId","firebase","initializeApp","messageRef","database","ref","listRef","LandingPage","props","changeHandler","e","preventDefault","setState","target","name","value","setName","document","getElementById","style","display","state","connectedRef","localStorage","setItem","on","snapshot","val","con","child","onDisconnect","remove","set","users","forEach","user","push","id","key","setList","names","submitHandler","text","saveMessage","message","onPress","font","onDelete","userName","orderByChild","equalTo","limitToLast","once","refresh","previousMessages","list","this","className","Object","keys","map","item","color","onSubmit","placeholder","onChange","required","type","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a0d37ab.chunk.js","sourcesContent":["require('dotenv').config();\r\n\r\nexport const firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_FIREBASE_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_DOMAIN,\r\n  databaseURL: \"https://message-app-2f7b3.firebaseio.com\",\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJEDT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID,\r\n  appId: \"1:318418595733:web:100410dda5ec1bc75c909c\",\r\n  measurementId: \"G-KH72VESE32\"\r\n};","import React, { Component } from 'react';\r\nimport firebase from 'firebase';\r\nimport { firebaseConfig } from './connection';\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nlet messageRef = firebase.database().ref('messages');\r\nlet listRef = firebase.database().ref('users');\r\n\r\nclass LandingPage extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      name: '',\r\n      message: '',\r\n      list: [],\r\n      names: [],\r\n      font: \"black\",\r\n    }\r\n\r\n  }\r\n\r\n  // LOAD PREVIOUS NAME AND MESSAGES ON PAGE LOAD \r\n  componentDidMount() {\r\n    const previousMessages = this.state.list;\r\n\r\n    messageRef.limitToLast(10).on('child_added', snapshot => {\r\n      previousMessages.push({\r\n        id: snapshot.key,\r\n        message: snapshot.val().text,\r\n        name: snapshot.val().name\r\n      })\r\n\r\n      this.setState({\r\n        list: previousMessages\r\n      })\r\n    })\r\n  }\r\n\r\n  // CHANGE STATE WITH INPUT DATA \r\n  changeHandler = e => {\r\n    e.preventDefault()\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n  // WHEN NAME SET, SHOW DIVS, ALSO SEND NAME TO DB FOR USER INSTANCES\r\n  setName = e => {\r\n    e.preventDefault()\r\n    this.setState({ [e.target.name]: e.target.value })\r\n    let textBox = document.getElementById('inputDivId');\r\n    textBox.style.display = \"flex\";\r\n    let messagesBox = document.getElementById('messagesDivId');\r\n    messagesBox.style.display = \"flex\";\r\n    let thinkDel = document.getElementById('options');\r\n    thinkDel.style.display = \"flex\";\r\n    let nameBox = document.getElementById('nameDivId');\r\n    nameBox.style.display = \"none\";\r\n\r\n    // ADD USER TO CONNECTED LIST \r\n    let name = this.state.name;\r\n    let connectedRef = firebase.database().ref('.info/connected');\r\n\r\n    localStorage.setItem('name', name);\r\n\r\n    connectedRef.on('value', (snapshot) => {\r\n      if (snapshot.val() === true) {\r\n        // CONNECTED\r\n        const con = listRef.child(name);  // DEFINE REFERENCE\r\n        // DISCONNECT, REMOVE NAME FROM DB\r\n        con.onDisconnect().remove();\r\n        // ADD NAME TO DB AFTER CALLING DISCONNECT - IMPORTANT (if not it adds then delets straight away)\r\n        con.set(true);   // ADD VALUE TO NAME INDEX/KEY (true)\r\n      }\r\n      // GET LIST FROM DB AND PUSH INTO OUR ARRAY IN THIS.STATE\r\n      listRef.on(\"value\", (snapshot) => {\r\n        let users = [];\r\n        snapshot.forEach((user) => {\r\n          users.push({\r\n            id: snapshot.key,\r\n            name: snapshot.val()\r\n          })\r\n        });\r\n        setList(users);\r\n      });\r\n      const setList = (users) => {\r\n        this.setState({\r\n          names: users[0].name\r\n        })\r\n        // console.log(this.state.names, users[0].name, Object.keys(users[0].name).length);\r\n      }\r\n    });\r\n  }\r\n\r\n  // PUSH MESSAGE TO DB THEN RESET THIS.STATE\r\n  submitHandler = e => {\r\n    e.preventDefault()\r\n    let name = this.state.name;\r\n    let text = this.state.message;\r\n    function saveMessage(name, text) {\r\n      let newMessageRef = messageRef.push();\r\n      newMessageRef.set({\r\n        name,\r\n        text,\r\n      })\r\n    }\r\n    saveMessage(name, text);\r\n\r\n    this.setState({ message: '' });\r\n  }\r\n\r\n  // THINK BTN CHANGING COLOUR OF TEXT \r\n  onPress = () => {\r\n    if (this.state.font === 'black') {\r\n      this.setState({ font: 'grey' });\r\n    }\r\n    else {\r\n      this.setState({ font: 'black' });\r\n    }\r\n  }\r\n\r\n  // DELETE LAST USER COMMENT \r\n  onDelete = () => {\r\n    let userName = this.state.name;\r\n    // console.log(userName);\r\n    messageRef.orderByChild('name').equalTo(userName).limitToLast(1).once('child_added', function (snapshot) {\r\n      snapshot.ref.remove();\r\n    })\r\n    this.refresh()\r\n  }\r\n  // REFRESH MESSAGE LIST AFTER DELETING LAST MESSAGE\r\n  refresh = () => {\r\n    const previousMessages = [];\r\n    messageRef.on('child_added', snapshot => {\r\n      previousMessages.push({\r\n        id: snapshot.key,\r\n        message: snapshot.val().text,\r\n        name: snapshot.val().name\r\n      })\r\n      this.setState({\r\n        list: previousMessages\r\n      })\r\n    })\r\n  }\r\n\r\n  // RENDER THE HTML\r\n  render() {\r\n    return <div className='container'>\r\n      {/* title */}\r\n      <div className='titleDiv'>\r\n        <h1>React Message App</h1>\r\n        {/* <p className='usersLoggedIn'>Logged in: </p> */}\r\n        {\r\n          Object.keys(this.state.names).map(item => {\r\n            return (\r\n              <p className='usersLoggedIn' key={item}>\r\n                {(item === this.state.name ? ' ' : item + ' is logged in')}\r\n              </p>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n\r\n      {/* messages will be listed here */}\r\n      < div className='messagesDiv' id='messagesDivId' >\r\n        <ul>\r\n          {/* List array is mapped through*/}\r\n          {this.state.list.map(item => {\r\n            return (\r\n              <li className={(item.name === this.state.name ? 'right' : 'left')}\r\n                style={{ color: this.state.font }}\r\n                key={item.id}\r\n                id={item.id}>\r\n                {item.name}: {item.message}\r\n              </li>\r\n            )\r\n          })}\r\n        </ul>\r\n      </div >\r\n\r\n      {/* message text area and send button here  */}\r\n      < div className='inputDiv' id='inputDivId' >\r\n        <form onSubmit={this.submitHandler}>\r\n          <input name=\"message\"\r\n            className='inputBox'\r\n            id='messageInputBox'\r\n            placeholder=\"Send message...\"\r\n            value={this.state.message}\r\n            onChange={this.changeHandler}\r\n            required />\r\n          <button className='submit' type=\"submit\">Send Message</button>\r\n        </form>\r\n      </div >\r\n\r\n      {/* type nickname + button here  */}\r\n      < div className='nicknameDiv' id='nameDivId' >\r\n        <form onSubmit={this.setName}>\r\n          <input name=\"name\"\r\n            className='inputBox'\r\n            placeholder=\"Choose a unique nickname...\"\r\n            value={this.name}\r\n            onChange={this.changeHandler}\r\n            required />\r\n          <button className='submit' type=\"submit\">Confirm Nickname</button>\r\n        </form>\r\n      </div >\r\n\r\n      {/*think, delete options*/}\r\n      < div id='options' >\r\n        <button id='think' className='button think' onClick={this.onPress}>Think...</button>\r\n        <button id='delete' className='button delete' onClick={this.onDelete}>Delete last message</button>\r\n      </div >\r\n\r\n    </div >\r\n  }\r\n}\r\n\r\nexport default LandingPage;","import React from 'react';\r\nimport LandingPage from './landingPage';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <LandingPage/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}